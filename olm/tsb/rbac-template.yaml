apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: template-service-broker-rbac
parameters:
- name: NAMESPACE
  value: openshift-template-service-broker
- name: KUBE_SYSTEM
  value: kube-system
objects:

# Grant the service account permission to call the TSB
# Done: template-service-broker-client section in clusterPermissions of CSV
# All that it does is grant nonResourceURL privileges
#- apiVersion: rbac.authorization.k8s.io/v1
#  kind: ClusterRoleBinding
#  metadata:
#    name: templateservicebroker-client
#  roleRef:
#    kind: ClusterRole
#    name: system:openshift:templateservicebroker-client
#  subjects:
#  - kind: ServiceAccount
#    namespace: ${NAMESPACE}
#    name: templateservicebroker-client

# to delegate authentication and authorization
# NOTE: This is also not required, it's
# - apiGroups:
# - authentication.k8s.io
# resources:
# - tokenreviews
# verbs:
# - create
# apiGroups:
# - authorization.k8s.io
# resources:
# - subjectaccessreviews
# verbs:
# - create
#- apiVersion: rbac.authorization.k8s.io/v1
#  kind: ClusterRoleBinding
#  metadata:
#    name: auth-delegator-${NAMESPACE}
#  roleRef:
#    kind: ClusterRole
#    name: system:auth-delegator
#  subjects:
#  - kind: ServiceAccount
#    namespace: ${NAMESPACE}
#    name: apiserver

# NOTE: Already described in the clusterPermissions section
# to have the template service broker powers
#- apiVersion: rbac.authorization.k8s.io/v1
#  kind: ClusterRoleBinding
#  metadata:
#    name: tsb-${NAMESPACE}
#  roleRef:
#    kind: ClusterRole
#    name: system:openshift:controller:template-service-broker
#  subjects:
#  - kind: ServiceAccount
#    namespace: ${NAMESPACE}
#    name: apiserver

# NOTE: ~~Don't have a way to express this in OLM, unless its possibly done
# as a clusterPermission?~~
# Also already done in the system:openshift:controller:template-service-broker...
#- apiGroups:
#  - ""
#  resourceNames:
#  - extension-apiserver-authentication
#  resources:
#  - configmaps
#  verbs:
#  - get
# to read the config for terminating authentication
#- apiVersion: rbac.authorization.k8s.io/v1
#  kind: RoleBinding
#  metadata:
#    namespace: ${KUBE_SYSTEM}
#    name: extension-apiserver-authentication-reader-${NAMESPACE}
#  roleRef:
#    kind: Role
#    name: extension-apiserver-authentication-reader
#  subjects:
#  - kind: ServiceAccount
#    namespace: ${NAMESPACE}
#    name: apiserver

################################################################################
# Don't think this is actually required; the service catalog already has blanket
# secret get privileges from a clusterrole.
################################################################################
#- apiVersion: rbac.authorization.k8s.io/v1
#  kind: Role
#  metadata:
#    name: templateservicebroker-auth-reader
#    namespace: ${NAMESPACE}
#  rules:
#  - apiGroups:
#    - ""
#    resourceNames:
#    - templateservicebroker-client
#    resources:
#    - secrets
#    verbs:
#    - get
#- apiVersion: rbac.authorization.k8s.io/v1
#  kind: RoleBinding
#  metadata:
#    namespace: ${NAMESPACE}
#    name: templateservicebroker-auth-reader
#  roleRef:
#    kind: Role
#    name: templateservicebroker-auth-reader
#  subjects:
#  - kind: ServiceAccount
#    namespace: kube-service-catalog
#    name: service-catalog-controller
################################################################################
